import{cy as f,a3 as h,u as g,M as l,a7 as i}from"./index-DrYYbCui.js";const d=f("twitter",{state:()=>({is_logged_in_twitter:!1,selected_twitter_account:null,challenge_solvers:{}}),actions:{async update(){const s=h(),r=g();if(await s.fetchUser()!==null&&s.is_logged_in===!0&&s.user&&s.user.twitter_accounts.length>0){this.is_logged_in_twitter=!0,(r.settings.selected_twitter_account_id===null||!s.user.twitter_accounts.some(e=>e.id===r.settings.selected_twitter_account_id))&&(r.settings.selected_twitter_account_id=s.user.twitter_accounts[0].id);const a=s.user.twitter_accounts.findIndex(e=>e.id===r.settings.selected_twitter_account_id);this.selected_twitter_account=s.user.twitter_accounts[a]}},async initChallengeSolverIframe(s){if(this.challenge_solvers[s])return;const r=await _.fetchChallengeData(s);if(r===null){console.error(`[TwitterStore] Failed to fetch challenge data for @${s}.`);return}const t=document.createElement("iframe");t.style.display="none",t.src="/solver.html",document.body.appendChild(t),this.challenge_solvers[s]={solver_iframe:t,challenge_data:r},await new Promise(a=>{t.onload=a}),t.contentWindow.postMessage({action:"init",challenge:r.challenge_js_code,anims:r.challenge_animation_svg_codes,verificationCode:r.verification_code},"*"),await new Promise((a,e)=>{const n=o=>{if(o.source!==t.contentWindow)return;const c=o.data;c.action==="ready"?(window.removeEventListener("message",n),console.log(`[TwitterStore] Challenge Solver for @${s} initialized successfully.`),a()):c.action==="initError"&&(window.removeEventListener("message",n),console.error(`[TwitterStore] Challenge Solver for @${s} failed to initialize.`),l.error(`Twitter @${s} の Challenge Solver の初期化に失敗しました。`),a())};window.addEventListener("message",n)})},async solveChallenge(s,r){if(!this.challenge_solvers[s]&&(await this.initChallengeSolverIframe(s),!this.challenge_solvers[s]))return console.error(`[TwitterStore] Failed to initialize challenge solver for @${s}.`),null;const t=this.challenge_solvers[s];if(!t.challenge_data.endpoint_infos[r])return console.error(`[TwitterStore] Endpoint info for ${r} not found.`),null;const a=t.challenge_data.endpoint_infos[r],e=Date.now();return t.solver_iframe.contentWindow.postMessage({action:"solve",path:a.path,method:a.method,id:e},"*"),new Promise((n,o)=>{const c=w=>{if(w.source!==t.solver_iframe.contentWindow)return;const u=w.data;u.id===e&&(u.action==="solved"?(window.removeEventListener("message",c),console.log(`[TwitterStore] X-Client-Transaction-ID: ${u.result}`),n(u.result)):u.action==="error"&&(window.removeEventListener("message",c),console.error(`[TwitterStore] Challenge Solver for @${s} failed to solve challenge. (${u.error})`),l.error(`Twitter @${s} の Challenge Solver が Challenge を解決できませんでした。`),n(null)))};window.addEventListener("message",c)})}}});class _{static async fetchAuthorizationURL(){const r=await i.get("/twitter/auth");return r.type==="error"?(i.showGenericError(r,"Twitter アカウントとの連携用の認証 URL を取得できませんでした。"),null):r.data.authorization_url}static async auth(r){const t=await i.post("/twitter/auth",r);if(t.type==="error"){if(typeof t.data.detail=="string"){if(t.data.detail.startsWith("Failed to authenticate with password")){const a=t.data.detail.match(/Message: (.+)\)/)[1];return l.error(`ログインに失敗しました。${a}`),!1}else if(t.data.detail.startsWith("Unexpected error occurred while authenticate with password")){const a=t.data.detail.match(/Message: (.+)\)/)[1];return l.error(`ログインフローの途中で予期せぬエラーが発生しました。${a}`),!1}else if(t.data.detail.startsWith("Failed to get user information"))return l.error("Twitter アカウントのユーザー情報の取得に失敗しました。"),!1}return i.showGenericError(t,"Twitter アカウントとの連携に失敗しました。"),!1}return!0}static async logoutAccount(r){const t=await i.delete(`/twitter/accounts/${r}`);return t.type==="error"?(i.showGenericError(t,"Twitter アカウントとの連携を解除できませんでした。"),!1):!0}static async fetchChallengeData(r){const t=await i.get(`/twitter/accounts/${r}/challenge-data`);if(t.type==="error"){switch(t.data.detail){default:i.showGenericError(t,"Twitter の Challenge 情報を取得できませんでした。");break}return null}return t.data.is_success===!1?(l.error(t.data.detail),null):t.data}static async sendTweet(r,t,a){const e=new FormData;e.append("tweet",t);for(const c of a)e.append("images",c);const n=await d().solveChallenge(r,"CreateTweet"),o=await i.post(`/twitter/accounts/${r}/tweets`,e,{headers:{"Content-Type":"multipart/form-data","X-Client-Transaction-ID":n},timeout:10*60*1e3});return o.type==="error"?typeof o.data.detail=="string"?Number.isNaN(o.status)?{message:`ツイートの送信に失敗しました。(${o.data.detail})`,is_error:!0}:{message:`ツイートの送信に失敗しました。(HTTP Error ${o.status} / ${o.data.detail})`,is_error:!0}:{message:`ツイートの送信に失敗しました。(HTTP Error ${o.status})`,is_error:!0}:o.data.is_success===!1?{message:o.data.detail,is_error:!0}:{message:o.data.detail,is_error:!1}}static async retweet(r,t){const a=await d().solveChallenge(r,"CreateRetweet"),e=await i.put(`/twitter/accounts/${r}/tweets/${t}/retweet`,void 0,{headers:{"X-Client-Transaction-ID":a}});if(e.type==="error"){switch(e.data.detail){default:i.showGenericError(e,"ツイートをリツイートできませんでした。");break}return null}return e.data.is_success===!1?(l.error(e.data.detail),null):e.data}static async cancelRetweet(r,t){const a=await d().solveChallenge(r,"DeleteRetweet"),e=await i.delete(`/twitter/accounts/${r}/tweets/${t}/retweet`,{headers:{"X-Client-Transaction-ID":a}});if(e.type==="error"){switch(e.data.detail){default:i.showGenericError(e,"リツイートを取り消せませんでした。");break}return null}return e.data.is_success===!1?(l.error(e.data.detail),null):e.data}static async favorite(r,t){const a=await d().solveChallenge(r,"FavoriteTweet"),e=await i.put(`/twitter/accounts/${r}/tweets/${t}/favorite`,void 0,{headers:{"X-Client-Transaction-ID":a}});if(e.type==="error"){switch(e.data.detail){default:i.showGenericError(e,"ツイートをいいねできませんでした。");break}return null}return e.data.is_success===!1?(l.error(e.data.detail),null):e.data}static async cancelFavorite(r,t){const a=await d().solveChallenge(r,"UnfavoriteTweet"),e=await i.delete(`/twitter/accounts/${r}/tweets/${t}/favorite`,{headers:{"X-Client-Transaction-ID":a}});if(e.type==="error"){switch(e.data.detail){default:i.showGenericError(e,"いいねを取り消せませんでした。");break}return null}return e.data.is_success===!1?(l.error(e.data.detail),null):e.data}static async getHomeTimeline(r,t){const a=await d().solveChallenge(r,"HomeLatestTimeline"),e=await i.get(`/twitter/accounts/${r}/timeline`,{params:{cursor_id:t},headers:{"X-Client-Transaction-ID":a}});if(e.type==="error"){switch(e.data.detail){default:i.showGenericError(e,"ホームタイムラインを取得できませんでした。");break}return null}return"is_success"in e.data&&e.data.is_success===!1?(l.error(e.data.detail),null):e.data}static async searchTweets(r,t,a){const e=await d().solveChallenge(r,"SearchTimeline"),n=await i.get(`/twitter/accounts/${r}/search`,{params:{query:t,cursor_id:a},headers:{"X-Client-Transaction-ID":e}});if(n.type==="error"){switch(n.data.detail){default:i.showGenericError(n,"ツイートの検索に失敗しました。");break}return null}return"is_success"in n.data&&n.data.is_success===!1?(l.error(n.data.detail),null):n.data}}export{_ as T,d as u};
